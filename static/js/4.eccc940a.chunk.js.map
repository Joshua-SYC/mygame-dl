{"version":3,"sources":["pages/Facility/FacilityItem.jsx","pages/Facility/MaterialItem.jsx","pages/Facility/Facility.jsx","pages/Facility/index.js"],"names":["FacilityItem","memo","props","index","item","lang","setFacility","id","image","type","value","title","locales","max","useMemo","getLimit","onChange","useCallback","prevFacility","map","f","i","className","size","onClick","filter","_","MaterialItem","rowIndex","columnIndex","style","data","undefined","flex","textAlign","btns","calcItem","createCachedSelector","field","start","end","ret","Object","entries","MATERIAL","forEach","key","materialKey","getMaterialKey","Facility","useParams","useState","facility","state","setState","typeOptions","HALIDOM_TYPES","label","fieldOptions","array","WEAPON_TYPES","ELEMENT_TYPES","useEvent","e","currentTarget","name","getFacilityMaxLevel","uuid","removeState","saveState","backup","loadState","prevState","useEffect","localFacility","localHalidom","tempArray","HALIDOM_LIST","level","keySet","split","keyType","length","push","includes","prev","material","subRet","options","disabled","height","width","itemData","columnCount","columnWidth","rowCount","rowHeight"],"mappings":"6PAkCeA,EA5BMC,gBAAK,SAAsBC,GAAQ,IAC9CC,EAAmCD,EAAnCC,MAAOC,EAA4BF,EAA5BE,KAAMC,EAAsBH,EAAtBG,KAAMC,EAAgBJ,EAAhBI,YACZC,EAAoBH,EAA3BI,MAAWC,EAAgBL,EAAhBK,KAAMC,EAAUN,EAAVM,MACnBC,EAAQC,YAAQL,EAAIF,EAAM,WAC1BG,EAAK,mBAAeD,GACpBM,EAAMC,mBAAQ,iBAAgB,UAATL,EAAmB,GAAKM,YAASN,KAAQ,CAACA,IAE/DO,EAAWC,uBACf,YAAgB,IAAbP,EAAY,EAAZA,MACDJ,GAAY,SAAAY,GACV,OAAOA,EAAaC,KAAI,SAACC,EAAGC,GAAJ,OAAWA,IAAMlB,EAAN,eAAmBiB,EAAnB,CAAsBV,UAAUU,UAGvE,CAACjB,EAAOG,IAOV,OACE,yBAAKgB,UAAU,iBACb,kBAAC,IAAD,CAAOd,MAAOA,EAAOe,KAAK,KAAKZ,MAAOA,EAAOa,QAN9B,WACjBlB,GAAY,SAAAY,GAAY,OAAIA,EAAaO,QAAO,SAACC,EAAGL,GAAJ,OAAUA,IAAMlB,WAM9D,kBAAC,IAAD,CAAQU,IAAKA,EAAKH,MAAOA,EAAOM,SAAUA,QCTjCW,EAjBM1B,gBAAK,SAAsBC,GAAQ,IAC9C0B,EAAuC1B,EAAvC0B,SAAUC,EAA6B3B,EAA7B2B,YAAaC,EAAgB5B,EAAhB4B,MAEzB1B,EAFyCF,EAAT6B,KACxB,EAAIH,EAAWC,GAG7B,QAAaG,IAAT5B,EAAoB,OAAO,KALsB,kBAOjCA,EAPiC,GAO9CG,EAP8C,KAO1CG,EAP0C,KAQ/CF,EAAK,mBAAeD,GAC1B,OACE,yBAAKuB,MAAOA,EAAOR,UAAU,UAC3B,kBAAC,IAAD,CAAOd,MAAOA,EAAOe,KAAK,OAC1B,yBAAKO,MAAO,CAAEG,KAAM,IAAKC,UAAW,WAAaxB,OCajDyB,EAAO,CAAC,MAAO,UAAW,OAAQ,OAElCC,EAAWC,KACf,SAAAjC,GAAI,OAAIA,KACR,SAAAA,GAAS,IAELK,EAGEL,EAHFK,KACA6B,EAEElC,EAFFkC,MAHI,cAKFlC,EADFM,MAJI,GAII6B,EAJJ,KAIWC,EAJX,KAMN,GAAID,IAAUC,EAAK,MAAO,GAE1B,IADA,IAAMC,EAAM,GACHpB,EAAIkB,EAAOlB,EAAImB,EAAKnB,GAAK,EAChCqB,OAAOC,QAAQC,IAASnC,GAAMY,IAAIwB,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXpC,EAAW,KACpDqC,EAAcC,YAAeF,EAAKR,GACxCG,EAAIM,IAAgBN,EAAIM,IAAgB,GAAKrC,KAIjD,OAAO+B,IAjBMJ,EAmBf,SAAAjC,GAAS,IAEPK,EAGEL,EAHFK,KACA6B,EAEElC,EAFFkC,MAHM,cAKJlC,EADFM,MAJM,GAIE6B,EAJF,KAISC,EAJT,KAOR,OAAID,IAAUC,EAAY,OAEpB,GAAN,OAAU/B,EAAV,YAAkB6B,EAAlB,YAA2BC,EAA3B,YAAoCC,MA+MvBS,MA5Mf,WAAqB,IAAD,EACMC,cAAhB7C,YADU,MACH,KADG,IAEc8C,mBAAS,IAFvB,mBAEXC,EAFW,KAED9C,EAFC,OAGQ6C,mBAAS,CAAE1C,KAAM,OAAQ6B,MAAO,KAHxC,mBAGXe,EAHW,KAGJC,EAHI,KAKZC,EAAczC,mBAAQ,WAC1B,OAAO0C,IAAcrC,KAAI,SAAAT,GAAK,MAAK,CACjCA,QACA+C,MAAO7C,YAAQF,EAAOL,SAEvB,CAACA,IAEEqD,EAAe5C,mBAAQ,WAC3B,IAAI6C,EACJ,OAAQN,EAAM5C,MACZ,IAAK,OACHkD,EAAQC,IACR,MACF,IAAK,OACHD,EAAQ,CAAC,SACT,MACF,QACEA,EAAQE,IAIZ,OAAOF,EAAMxC,KAAI,SAAAT,GAAK,MAAK,CAAEA,QAAO+C,MAAO7C,YAAQF,EAAOL,SACzD,CAACgD,EAAM5C,KAAMJ,IAEVmB,EAAUsC,aAAS,SAAAC,GACvB,OAAQA,EAAEC,cAAcC,MACtB,IAAK,MAAQ,IAEPnB,EACAjC,EAFIJ,EAAgB4C,EAAhB5C,KAAM6B,EAAUe,EAAVf,MAGd,GAAa,UAAT7B,EAAkB,CACpB,GAAc,KAAV6B,EAAc,OAClBQ,EAAME,YAAevC,EAAM6B,GAC3BzB,EAAMqD,YAAoB,CAAEzD,cAE5BqC,EAAM,QACNjC,EAAM,GAGRP,GAAY,SAAAY,GAAY,4BACnBA,GADmB,CAEtB,CAAEX,GAAI4D,MAAQ3D,MAAOsC,EAAKrC,OAAM6B,QAAO5B,MAAO,CAAC,EAAGG,SAEpD,MAEF,IAAK,MACHuD,YAAY,yBACZ9D,EAAY,IACZ,MACF,IAAK,OACH+D,YAAU,wBAAyBjB,GACnC,MACF,IAAK,UACH,IAAMkB,EAASC,YAAU,yBACzB,GAAe,OAAXD,EAAiB,OACrBhE,EAAYgE,OAQZtD,EAAWC,uBAAY,YAAsB,IAAnBgD,EAAkB,EAAlBA,KAAMvD,EAAY,EAAZA,MACpC4C,GAAS,SAAAkB,GAAS,sBAAUA,EAAV,eAAsBP,EAAOvD,SAC9C,IAEH+D,qBAAU,WAER,IAAMC,EAAgBH,YAAU,yBAEhC,GAAsB,OAAlBG,EAAJ,CAKA,IAAMC,EAAeJ,YAAU,wBAC/B,GAAqB,OAAjBI,EAAJ,CAEA,IAAMC,EAAY,GAClBC,IAAahC,SAAQ,SAAAC,GACnB,IAAM1C,EAAOuE,EAAa7B,GAClBvC,EAAcH,EAAdG,GAAIuE,EAAU1E,EAAV0E,MACNjE,EAAMqD,YAAoB9D,GAChC,GAAI0E,IAAUjE,EAAK,CACjB,IAAMkE,EAASjC,EAAIkC,MAAM,KACrBC,EAAUF,EAAOA,EAAOG,OAAS,GACjC5C,EAAQyC,EAAOA,EAAOG,OAAS,GAE/B1E,EAAQD,EACI,WAAZ0E,GAAoC,WAAZA,IAC1BA,EAAU,QACV3C,EAAQ,QACR9B,EAAQ,SAGVoE,EAAUO,KAAK,CACb5E,GAAI4D,MACJ3D,QACAC,KAAMwE,EACN3C,QACA5B,MAAO,CAACoE,EAAOjE,SAKI,IAArB+D,EAAUM,QACZ5E,EAAYsE,SAnCZtE,EAAYoE,KAqCb,IAEHD,qBAAU,WAAO,IACPhE,EAAgB4C,EAAhB5C,KAAM6B,EAAUe,EAAVf,MACd,GAAa,SAAT7B,GAA6B,UAAV6B,GAKvB,GAAc,KAAVA,EAAJ,CAEA,GAAa,SAAT7B,GACF,GAAImD,IAAawB,SAAS9C,GAAQ,YAC7B,GAAa,UAAT7B,GAAoBoD,IAAcuB,SAAS9C,GACpD,OAGFgB,GAAS,SAAAkB,GAAS,sBAAUA,EAAV,CAAqBlC,MAAO,cAZ5CgB,GAAS,SAAA+B,GAAI,sBAAUA,EAAV,CAAgB/C,MAAO,eAarC,CAACe,IAEJ,IAAMiC,EAAWxE,mBAAQ,WACvB,IAAM2B,EAAM,GAQZ,OAPAW,EAASP,SAAQ,SAAAzC,GACf,IAAMmF,EAASnD,EAAShC,GACxBsC,OAAOC,QAAQ4C,GAAQ1C,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXpC,EAAW,KAC/C+B,EAAIK,IAAQL,EAAIK,IAAQ,GAAKpC,QAI1BgC,OAAOC,QAAQF,GAAKhB,QAAO,+CAA0B,IAA1B,UACjC,CAAC2B,IAEJ,OACE,0BAAM7C,GAAG,YACP,yBAAKA,GAAG,iBACN,kBAAC,IAAD,CAAU4B,KAAMA,EAAMX,QAASA,IAC/B,yBAAKF,UAAU,UACb,kBAAC,IAAD,CACE2C,KAAK,OACLR,MAAO7C,YAAQyC,EAAM5C,KAAMJ,GAC3BK,MAAO2C,EAAM5C,KACb+E,QAASjC,EACTvC,SAAUA,IAGZ,kBAAC,IAAD,CACEyE,SAAyB,UAAfpC,EAAM5C,KAChBwD,KAAK,QACLR,MAAO7C,YAAQyC,EAAMf,MAAOjC,GAC5BK,MAAO2C,EAAMf,MACbkD,QAAS9B,EACT1C,SAAUA,KAGd,yBAAKM,UAAU,QACZ8B,EAASjC,KAAI,SAACC,EAAGC,GAChB,OACE,kBAAC,EAAD,CACEyB,IAAK1B,EAAEb,GACPJ,MAAOkB,EACPjB,KAAMgB,EACNf,KAAMA,EACNC,YAAaA,SAOvB,yBAAKC,GAAG,gBAAgBe,UAAU,QAChC,kBAAC,IAAD,MACG,gBAAGoE,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OACC,kBAAC,IAAD,CACEA,MAAOA,EACPD,OAAQA,EACRE,SAAUN,EACVO,YAAa,EACbC,YAAaH,EAAQ,EAAI,EACzBI,SAAUT,EAASJ,OACnBc,UAAW,IAEVrE,SC9PAsB","file":"static/js/4.eccc940a.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React, { memo, useMemo, useCallback } from 'react';\r\nimport { getLimit } from 'utils';\r\nimport locales from 'locales';\r\nimport { Image, Slider } from 'components';\r\n\r\nconst FacilityItem = memo(function FacilityItem(props) {\r\n  const { index, item, lang, setFacility } = props;\r\n  const { image: id, type, value } = item;\r\n  const title = locales(id, lang, 'halidom');\r\n  const image = `facility/${id}`;\r\n  const max = useMemo(() => (type === 'event' ? 35 : getLimit(type)), [type]);\r\n\r\n  const onChange = useCallback(\r\n    ({ value }) => {\r\n      setFacility(prevFacility => {\r\n        return prevFacility.map((f, i) => (i === index ? { ...f, value } : f));\r\n      });\r\n    },\r\n    [index, setFacility]\r\n  );\r\n\r\n  const removeItem = () => {\r\n    setFacility(prevFacility => prevFacility.filter((_, i) => i !== index));\r\n  };\r\n\r\n  return (\r\n    <div className=\"facility-item\">\r\n      <Image image={image} size=\"lg\" title={title} onClick={removeItem} />\r\n      <Slider max={max} value={value} onChange={onChange} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default FacilityItem;\r\n","import React, { memo } from 'react';\r\nimport { Image } from 'components';\r\n\r\nconst MaterialItem = memo(function MaterialItem(props) {\r\n  const { rowIndex, columnIndex, style, data } = props;\r\n  const index = 2 * rowIndex + columnIndex;\r\n  const item = data[index];\r\n\r\n  if (item === undefined) return null;\r\n\r\n  const [id, value] = item;\r\n  const image = `material/${id}`;\r\n  return (\r\n    <div style={style} className=\"flex-v\">\r\n      <Image image={image} size=\"md\" />\r\n      <div style={{ flex: '1', textAlign: 'center' }}>{value}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MaterialItem;\r\n","/* eslint-disable no-unused-vars */\r\n/* eslint-disable react/no-array-index-key */\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FixedSizeGrid } from 'react-window';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport createCachedSelector from 're-reselect';\r\nimport uuid from 'uuid/v1';\r\nimport {\r\n  getMaterialKey,\r\n  ELEMENT_TYPES,\r\n  HALIDOM_LIST,\r\n  HALIDOM_TYPES,\r\n  MATERIAL,\r\n  WEAPON_TYPES,\r\n} from 'data';\r\nimport {\r\n  getFacilityMaxLevel,\r\n  loadState,\r\n  removeState,\r\n  saveState,\r\n  useEvent,\r\n} from 'utils';\r\nimport { BtnPanel, Select } from 'components';\r\nimport locales from 'locales';\r\nimport FacilityItem from './FacilityItem';\r\nimport MaterialItem from './MaterialItem';\r\n\r\nconst btns = ['del', 'refresh', 'save', 'add'];\r\n\r\nconst calcItem = createCachedSelector(\r\n  item => item,\r\n  item => {\r\n    const {\r\n      type,\r\n      field,\r\n      value: [start, end],\r\n    } = item;\r\n    if (start === end) return {};\r\n    const ret = {};\r\n    for (let i = start; i < end; i += 1) {\r\n      Object.entries(MATERIAL[type][i]).forEach(([key, value]) => {\r\n        const materialKey = getMaterialKey(key, field);\r\n        ret[materialKey] = (ret[materialKey] || 0) + value;\r\n      });\r\n    }\r\n\r\n    return ret;\r\n  }\r\n)(item => {\r\n  const {\r\n    type,\r\n    field,\r\n    value: [start, end],\r\n  } = item;\r\n\r\n  if (start === end) return 'NONE';\r\n\r\n  return `${type}_${field}_${start}_${end}`;\r\n});\r\n\r\nfunction Facility() {\r\n  const { lang = 'en' } = useParams();\r\n  const [facility, setFacility] = useState([]);\r\n  const [state, setState] = useState({ type: 'dojo', field: '' });\r\n\r\n  const typeOptions = useMemo(() => {\r\n    return HALIDOM_TYPES.map(value => ({\r\n      value,\r\n      label: locales(value, lang),\r\n    }));\r\n  }, [lang]);\r\n\r\n  const fieldOptions = useMemo(() => {\r\n    let array;\r\n    switch (state.type) {\r\n      case 'dojo':\r\n        array = WEAPON_TYPES;\r\n        break;\r\n      case 'tree':\r\n        array = ['Flame'];\r\n        break;\r\n      default:\r\n        array = ELEMENT_TYPES;\r\n        break;\r\n    }\r\n\r\n    return array.map(value => ({ value, label: locales(value, lang) }));\r\n  }, [state.type, lang]);\r\n\r\n  const onClick = useEvent(e => {\r\n    switch (e.currentTarget.name) {\r\n      case 'add': {\r\n        const { type, field } = state;\r\n        let key;\r\n        let max;\r\n        if (type !== 'event') {\r\n          if (field === '') return;\r\n          key = getMaterialKey(type, field);\r\n          max = getFacilityMaxLevel({ type });\r\n        } else {\r\n          key = 'event';\r\n          max = 35;\r\n        }\r\n\r\n        setFacility(prevFacility => [\r\n          ...prevFacility,\r\n          { id: uuid(), image: key, type, field, value: [0, max] },\r\n        ]);\r\n        break;\r\n      }\r\n      case 'del':\r\n        removeState('dragalialost-facility');\r\n        setFacility([]);\r\n        break;\r\n      case 'save':\r\n        saveState('dragalialost-facility', facility);\r\n        break;\r\n      case 'refresh': {\r\n        const backup = loadState('dragalialost-facility');\r\n        if (backup === null) return;\r\n        setFacility(backup);\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  const onChange = useCallback(({ name, value }) => {\r\n    setState(prevState => ({ ...prevState, [name]: value }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // auto detect local facility or halidom records\r\n    const localFacility = loadState('dragalialost-facility');\r\n\r\n    if (localFacility !== null) {\r\n      setFacility(localFacility);\r\n      return;\r\n    }\r\n\r\n    const localHalidom = loadState('dragalialost-halidom');\r\n    if (localHalidom === null) return;\r\n\r\n    const tempArray = [];\r\n    HALIDOM_LIST.forEach(key => {\r\n      const item = localHalidom[key];\r\n      const { id, level } = item;\r\n      const max = getFacilityMaxLevel(item);\r\n      if (level !== max) {\r\n        const keySet = key.split('_');\r\n        let keyType = keySet[keySet.length - 2];\r\n        let field = keySet[keySet.length - 3];\r\n\r\n        let image = id;\r\n        if (keyType === 'eventE' || keyType === 'eventW') {\r\n          keyType = 'event';\r\n          field = 'event';\r\n          image = 'event';\r\n        }\r\n\r\n        tempArray.push({\r\n          id: uuid(),\r\n          image,\r\n          type: keyType,\r\n          field,\r\n          value: [level, max],\r\n        });\r\n      }\r\n    });\r\n\r\n    if (tempArray.length !== 0) {\r\n      setFacility(tempArray);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const { type, field } = state;\r\n    if (type === 'tree' && field !== 'Flame') {\r\n      setState(prev => ({ ...prev, field: 'Flame' }));\r\n      return;\r\n    }\r\n\r\n    if (field === '') return;\r\n\r\n    if (type === 'dojo') {\r\n      if (WEAPON_TYPES.includes(field)) return;\r\n    } else if (type !== 'event' && ELEMENT_TYPES.includes(field)) {\r\n      return;\r\n    }\r\n\r\n    setState(prevState => ({ ...prevState, field: '' }));\r\n  }, [state]);\r\n\r\n  const material = useMemo(() => {\r\n    const ret = {};\r\n    facility.forEach(item => {\r\n      const subRet = calcItem(item);\r\n      Object.entries(subRet).forEach(([key, value]) => {\r\n        ret[key] = (ret[key] || 0) + value;\r\n      });\r\n    });\r\n\r\n    return Object.entries(ret).filter(([_, value]) => value !== 0);\r\n  }, [facility]);\r\n\r\n  return (\r\n    <main id=\"facility\">\r\n      <div id=\"facility-col1\">\r\n        <BtnPanel btns={btns} onClick={onClick} />\r\n        <div className=\"grid-2\">\r\n          <Select\r\n            name=\"type\"\r\n            label={locales(state.type, lang)}\r\n            value={state.type}\r\n            options={typeOptions}\r\n            onChange={onChange}\r\n          />\r\n\r\n          <Select\r\n            disabled={state.type === 'event'}\r\n            name=\"field\"\r\n            label={locales(state.field, lang)}\r\n            value={state.field}\r\n            options={fieldOptions}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <div className=\"list\">\r\n          {facility.map((f, i) => {\r\n            return (\r\n              <FacilityItem\r\n                key={f.id}\r\n                index={i}\r\n                item={f}\r\n                lang={lang}\r\n                setFacility={setFacility}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"facility-col2\" className=\"list\">\r\n        <AutoSizer>\r\n          {({ height, width }) => (\r\n            <FixedSizeGrid\r\n              width={width}\r\n              height={height}\r\n              itemData={material}\r\n              columnCount={2}\r\n              columnWidth={width / 2 - 8}\r\n              rowCount={material.length}\r\n              rowHeight={64}\r\n            >\r\n              {MaterialItem}\r\n            </FixedSizeGrid>\r\n          )}\r\n        </AutoSizer>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Facility;\r\n","import Facility from './Facility';\r\n\r\nexport default Facility;\r\n"],"sourceRoot":""}